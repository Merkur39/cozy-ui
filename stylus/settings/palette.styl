@require '../tools/mixins'
palette=json('../../theme/palette.json', { hash: true })

// @stylint off
/*------------------------------------*\
  Palette
  =====
\*------------------------------------*/
/*
    Settings

    Weight: -10

    Styleguide Settings
*/

/*
    Colors

    Colors used in the user interface.

    ℹ️  In general, you are advised to use [theme colors](#kssref-settings-theme) when
    building your components: this will ensure your components react correctly when
    changing the theme.

    If you need to access an absolute color that is not semantic, you can use

    ```
    import palette from 'cozy-ui/transpiled/react/palette'
    <div style={{ backgroundColor: palette.melon }} />
    ```

    Styleguide Settings.colors
*/
html
    /*
    Grey

    Stylus: white        -  #FFFFFF, CSS: var(--white)
    Stylus: paleGrey     -  #F5F6F7, CSS: var(--paleGrey)
    Stylus: silver       -  #D6D8Da, CSS: var(--silver)
    Stylus: coolGrey     -  #95999D, CSS: var(--coolGrey)
    Stylus: slateGrey    -  #5D6165, CSS: var(--slateGrey)
    Stylus: charcoalGrey -  #32363F, CSS: var(--charcoalGrey)
    Stylus: black        -  #000000, CSS: var(--black)


    Styleguide Settings.colors.grey
    */
    --white         palette.Common['white']
    --paleGrey      #F5F6F7
    --silver        #D6D8Da
    --coolGrey      #95999D
    --slateGrey     #5D6165
    --charcoalGrey  #32363F
    --black         palette.Common['black']
    --overlay       rgba(50, 54, 63, .5)

    /*
    Blue

    Stylus: zircon       -  #F5FAFF, CSS: var(--zircon)
    Stylus: dodgerBlue   -  #297EF2, CSS: var(--dodgerBlue)
    Stylus: scienceBlue  -  #0B61D6, CSS: var(--scienceBlue)

    Styleguide Settings.colors.blue
    */
    --zircon       #F5FAFF
    --dodgerBlue   #297EF2
    --scienceBlue  #0B61D6

    /*
    Green

    Stylus: weirdGreen   - #40DE8E, CSS: var(--weirdGreen)
    Stylus: emerald      - #35CE68, CSS: var(--emerald)
    Stylus: malachite    - #08b442, CSS: var(--malachite)

    Styleguide Settings.colors.green
    */
    --weirdGreen   #40DE8E
    --emerald      #35CE68
    --malachite    #08b442

    /*
    Orange

    Stylus: mango         - #FF962F, CSS: var(--mango)

    Styleguide Settings.colors.orange
    */
    --mango          #FF962F

    /*
    Red

    Stylus: chablis      - #FFF2F2, CSS: var(--chablis)
    Stylus: yourPink     - #FDCBCB, CSS: var(--yourPink)
    Stylus: fuchsia      - #FC4C83, CSS: var(--fuchsia)
    Stylus: pomegranate  - #F52D2D, CSS: var(--pomegranate)
    Stylus: monza        - #DD0505, CSS: var(--monza)

    Styleguide Settings.colors.red
    */
    --chablis      #FFF2F2
    --yourPink     #FDCBCB
    --fuchsia      #FC4C83
    --pomegranate  #F52D2D
    --monza        #DD0505

/*
    Theme

    Semantic colors suitable for theming. We encourage users of cozy-ui to use semantic colors
    instead of absolute colors to facilitate theming.

    We try to use a naming schema that is close to what is use in [Material-UI React's theming](https://material-ui.com/customization/palette/#palette-colors).
    It is possible that we have some discrepancies. If you see something that seems out
    of the ordinary and where you think we could reduce the difference with MUI, please
    do not hesitate to [open an issue](https://github.com/cozy/cozy-ui/issues/new).

    Styleguide Settings.theme
*/
html, .CozyTheme--normal
    /*
    Primary

    Stylus: primaryColor             - #297EF2, CSS: var(--primaryColor)
    Stylus: primaryColorDark         - #0B61D6, CSS: var(--primaryColorDark)
    Stylus: primaryColorLight        - #5C9DF5, CSS: var(--primaryColorLight)
    Stylus: primaryColorLightest     - #B3D3FF, CSS: var(--primaryColorLightest)

    Styleguide Settings.theme.primary
    */
    --primaryColor palette.Primary['600']
    --primaryColorDark palette.Primary['700']
    --primaryColorLight palette.Primary['500']
    --primaryColorLightest palette.Primary['300']

    /*
    Secondary

    Stylus: secondaryColor   - #EA3F3F, CSS: var(--secondaryColor)
    Stylus: secondaryColorDark   - #D31F1F, CSS: var(--secondaryColorDark)
    Stylus: secondaryColorLight   - #F96B6B, CSS: var(--secondaryColorLight)
    Stylus: secondaryColorLightest   - #FFD3D3, CSS: var(--secondaryColorLightest)

    Styleguide Settings.theme.secondary
    */
    --secondaryColor palette.Error['600']
    --secondaryColorDark palette.Error['700']
    --secondaryColorLight palette.Error['500']
    --secondaryColorLightest palette.Error['200']

    /*
    Background colors

    Stylus: primaryBackgroundLight -  #F7FAFF, CSS: var(--primaryBackgroundLight)
    Stylus: paperBackgroundColor -  #FFF, CSS: var(--paperBackgroundColor)
    Stylus: defaultBackgroundColor -  #F4F5F6, CSS: var(--defaultBackgroundColor)

    Styleguide Settings.theme.background
    */
    --primaryBackgroundLight palette.Primary['50']
    --paperBackgroundColor palette.Common['white']
    --defaultBackgroundColor palette.Grey['100']

    /*
    Text colors

    These colors use the alpha layer. Be careful to use the semantic variable.
    Hexadecimal colors are here only as an example on a white background.

    Stylus: primaryTextColor -  #383B43, CSS: var(--primaryTextColor)
    Stylus: secondaryTextColor - #9D9EA1, CSS: var(--secondaryTextColor)
    Stylus: primaryContrastTextColor -  #FFF, CSS: var(--primaryContrastTextColor)
    Stylus: secondaryContrastTextColor -  #FFF, CSS: var(--secondaryContrastTextColor)

    Styleguide Settings.theme.text
    */
    --primaryTextColor alpha(palette.Grey['900'], 0.9)
    --secondaryTextColor alpha(palette.Grey['900'], 0.48)
    --primaryContrastTextColor palette.Common['white']
    --secondaryContrastTextColor palette.Common['white']


    /*
    Components colors

    Be careful to use the semantic variable, not the hexa color.
    In this case the real color is `#1D212A1F`, and becomes `#E3E4E5` on a white background.

    Stylus: dividerColor - #E3E4E5, CSS: var(--dividerColor)

    Styleguide Settings.theme.components
    */
    --dividerColor alpha(palette.Grey['900'], 0.12)

    /*
    Intention colors

    Stylus: successColor -  #09AE1C, CSS: var(--successColor)
    Stylus: warningColor -  #CB8100, CSS: var(--warningColor)
    Stylus: errorColor -  #EA3F3F, CSS: var(--errorColor)
    Stylus: infoColor -  #009FA2, CSS: var(--infoColor)

    Styleguide Settings.theme.intention
    */
    --successColor palette.Success['600']
    --warningColor palette.Warning['600']
    --errorColor palette.Error['600']
    --errorColorDark palette.Error['700']
    --errorColorLight palette.Error['500']
    --errorColorLightest palette.Error['100']
    --infoColor palette.Info['600']
    --errorBackground palette.Error['100']

    /*
    The CSS variables below are historic and we should strive not to
    use them. Prefer to use directly semantic colors above.
    */
    --spinnerColor var(--primaryColor)

    --linkColor var(--primaryColor)
    --linkTextDecoration none
    --linkColorActive var(--primaryColorDark)

    --invertedTabsActiveTextColor var(--primaryContrastTextColor)
    --invertedTabsInactiveTextColor var(--primaryContrastTextColor)
    --invertedTabsIndicatorColor var(--primaryContrastTextColor)
    --invertedTabsBackgroundColor var(--primaryColor)

    --regularButtonPrimaryColor var(--primaryColor)
    --regularButtonSecondaryColor var(--primaryColor)
    --regularButtonActiveColor var(--primaryColorDark)
    --regularButtonConstrastColor var(--primaryContrastTextColor)

    --secondaryButtonPrimaryColor #FFF
    --secondaryButtonSecondaryColor var(--silver)
    --secondaryButtonActiveColor var(--silver)
    --secondaryButtonContrastColor var(--black)

    --dividerColor2 var(--coolGrey)

    --iconColor currentColor
    --textIconColor var(--charcoalGrey)
    --actionMenuIconColor var(--slateGrey)

    --neutralBackground var(--paleGrey)

    --buttonTextTransform uppercase
    --buttonBorderRadius rem(2)

    --navTextColor var(--slateGrey)
    --navTextActiveColor var(--slateGrey)
    --navTextHoverColor var(--charcoalGrey)

    --alertErrorColor #fff
    --alertErrorBackgroundColor var(--errorColor)

    --alertSuccessColor #fff
    --alertSuccessBackgroundColor var(--successColor)

    --alertInfoColor #fff
    --alertInfoBackgroundColor var(--slateGrey)
// @stylint on
